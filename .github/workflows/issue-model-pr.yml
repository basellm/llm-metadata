name: Issue to PR (model submission)

on:
  issues:
    types: [opened, edited, labeled, reopened]
  workflow_dispatch:
    inputs:
      issue_number:
        description: 'Issue number to convert'
        required: true
        type: string

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  issue_to_pr:
    if: |
      (github.event_name == 'workflow_dispatch') || (
        github.event.issue.state == 'open' && (
          contains(github.event.issue.title, '[Model Submission]') ||
          contains(github.event.issue.body, '"schema": "model-submission"') ||
          contains(github.event.issue.labels.*.name, 'model-submission')
        )
      )
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Prepare payload
        id: payload
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          DISPATCH_ISSUE_NUMBER: ${{ inputs.issue_number }}
          EVENT_ISSUE_NUMBER: ${{ github.event.issue.number }}
        run: |
          set -euo pipefail
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            ISSUE_NUM="${DISPATCH_ISSUE_NUMBER}"
          else
            ISSUE_NUM="${EVENT_ISSUE_NUMBER}"
          fi

          # Always fetch body via GH CLI to avoid script injection from raw interpolation
          ISSUE_BODY=$(gh issue view "$ISSUE_NUM" -R "$REPO" --json body -q .body)
          ISSUE_NUMBER_OUT="$ISSUE_NUM"

          echo "Extract JSON payload from issue body"
          # Extract fenced JSON block
          PAYLOAD=$(printf '%s\n' "$ISSUE_BODY" | sed -n '/^```json[[:space:]]*$/,/^```[[:space:]]*$/p' | sed '1d;$d')
          if [ -z "$PAYLOAD" ]; then
            echo "No JSON payload found in issue body" >&2
            exit 1
          fi
          echo "$PAYLOAD" > payload.json
          cat payload.json

          ACTION=$(jq -r '.action // "create"' payload.json)
          PROVIDER=$(jq -r '.providerId' payload.json)
          MODEL=$(jq -r '.modelId' payload.json)
          BRANCH="feat/model-${PROVIDER}-${MODEL}-$(date -u +%Y%m%d%H%M%S)"
          echo "action=$ACTION" >> $GITHUB_OUTPUT
          echo "provider=$PROVIDER" >> $GITHUB_OUTPUT
          echo "model=$MODEL" >> $GITHUB_OUTPUT
          echo "branch=$BRANCH" >> $GITHUB_OUTPUT
          echo "issue_number=$ISSUE_NUMBER_OUT" >> $GITHUB_OUTPUT

      - name: Create branch
        run: |
          git checkout -b "${{ steps.payload.outputs.branch }}"

      - name: Apply overrides change
        run: |
          set -euo pipefail
          jq \
            --arg prov "${{ steps.payload.outputs.provider }}" \
            --arg model "${{ steps.payload.outputs.model }}" \
            --slurpfile p payload.json \
            '
            .models[$prov + "/" + $model] = (
              .models[$prov + "/" + $model] // {} | . as $orig | ($p[0] | {
                id: .modelId,
                name: .name,
                description: .description,
                tags: .tags,
                icon: .icon,
                reasoning: .reasoning,
                tool_call: .tool_call,
                attachment: .attachment,
                temperature: .temperature,
                modalities: .modalities,
                limit: .limit,
                cost: .cost
              } | with_entries(select(.value != null)))
            )
            ' data/overrides.json > data/overrides.json.tmp
          mv data/overrides.json.tmp data/overrides.json

      - name: Install dependencies
        run: |
          npm ci
          pip install -r requirements.txt

      - name: Build API (check changes)
        run: |
          npm run check || true

      - name: Commit changes
        env:
          PROVIDER: ${{ steps.payload.outputs.provider }}
          MODEL: ${{ steps.payload.outputs.model }}
          ISSUE_NUM: ${{ steps.payload.outputs.issue_number }}
        run: |
          set -euo pipefail
          # Remove temporary files from working tree (not committed)
          rm -f payload.json || true
          if [ -n "$(git status --porcelain)" ]; then
            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            # Stage overrides; stage dist/api only if it exists
            git add data/overrides.json || true
            if [ -d dist/api ]; then
              git add -A dist/api || true
            fi
            git commit -m "âœ¨ feat(models): ${PROVIDER}/${MODEL} via issue #${ISSUE_NUM}"
            git push --set-upstream origin "${{ steps.payload.outputs.branch }}"
          else
            echo "No changes to commit"
          fi

      - name: Open Pull Request
        env:
          GH_TOKEN: ${{ secrets.GH_PAT || secrets.AUTOMATION_ISSUE2PR || secrets.GITHUB_TOKEN }}
        run: |
          BASE_BRANCH=${{ github.event.repository.default_branch }}
          gh pr create \
            --title "feat(models): ${{ steps.payload.outputs.provider }}/${{ steps.payload.outputs.model }}" \
            --body "This PR was automatically generated from issue #${{ steps.payload.outputs.issue_number }}." \
            --base "$BASE_BRANCH" \
            --head "${{ steps.payload.outputs.branch }}"

      - name: Comment back to issue
        env:
          GH_TOKEN: ${{ secrets.GH_PAT || secrets.AUTOMATION_ISSUE2PR || secrets.GITHUB_TOKEN }}
        run: |
          PR_URL=$(gh pr view --json url -q .url)
          gh issue comment "${{ steps.payload.outputs.issue_number }}" --body "PR created: $PR_URL"
