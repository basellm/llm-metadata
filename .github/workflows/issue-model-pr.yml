name: Issue to PR (model submission)

on:
  issues:
    types: [opened, edited]

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  issue_to_pr:
    if: |
      github.event.issue.state == 'open' &&
      (contains(github.event.issue.labels.*.name, 'model-submission') ||
       contains(github.event.issue.title, '[Model Submission]'))
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Prepare payload
        id: payload
        run: |
          set -euo pipefail
          ISSUE_BODY=$(printf "%s" "${{ github.event.issue.body }}")
          echo "Extract JSON payload from issue body"
          PAYLOAD=$(printf "%s" "$ISSUE_BODY" | awk '/```json/{flag=1;next}/```/{flag=0}flag')
          if [ -z "$PAYLOAD" ]; then
            echo "No JSON payload found in issue body" >&2
            exit 1
          fi
          echo "$PAYLOAD" > payload.json
          cat payload.json

          ACTION=$(jq -r '.action // "create"' payload.json)
          PROVIDER=$(jq -r '.providerId' payload.json)
          MODEL=$(jq -r '.modelId' payload.json)
          BRANCH="feat/model-${PROVIDER}-${MODEL}-$(date -u +%Y%m%d%H%M%S)"
          echo "action=$ACTION" >> $GITHUB_OUTPUT
          echo "provider=$PROVIDER" >> $GITHUB_OUTPUT
          echo "model=$MODEL" >> $GITHUB_OUTPUT
          echo "branch=$BRANCH" >> $GITHUB_OUTPUT

      - name: Create branch
        run: |
          git checkout -b "${{ steps.payload.outputs.branch }}"

      - name: Apply overrides change
        run: |
          set -euo pipefail
          jq \
            --arg prov "${{ steps.payload.outputs.provider }}" \
            --arg model "${{ steps.payload.outputs.model }}" \
            --slurpfile p payload.json \
            '
            .models[$prov + "/" + $model] = (
              .models[$prov + "/" + $model] // {} | . as $orig | ($p[0] | {
                id: .modelId,
                name: .name,
                description: .description,
                tags: .tags,
                icon: .icon,
                reasoning: .reasoning,
                tool_call: .tool_call,
                attachment: .attachment,
                temperature: .temperature,
                modalities: .modalities,
                limit: .limit,
                cost: .cost
              } | with_entries(select(.value != null)))
            )
            ' data/overrides.json > data/overrides.json.tmp
          mv data/overrides.json.tmp data/overrides.json

      - name: Install dependencies
        run: |
          npm ci
          pip install -r requirements.txt

      - name: Build API (check changes)
        run: |
          npm run check || true

      - name: Commit changes
        run: |
          set -euo pipefail
          if [ -n "$(git status --porcelain)" ]; then
            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git add data/overrides.json dist/api dist/docs || true
            git commit -m "
            âœ¨ feat(models): ${
              { echo "${{ steps.payload.outputs.provider }}/${{ steps.payload.outputs.model }}"; }
            } via issue #${{ github.event.issue.number }}
            "
            git push --set-upstream origin "${{ steps.payload.outputs.branch }}"
          else
            echo "No changes to commit"
          fi

      - name: Open Pull Request
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh pr create \
            --title "feat(models): ${{ steps.payload.outputs.provider }}/${{ steps.payload.outputs.model }}" \
            --body "This PR was automatically generated from issue #${{ github.event.issue.number }}." \
            --base ${{ github.event.repository.default_branch }} \
            --head "${{ steps.payload.outputs.branch }}"

      - name: Comment back to issue
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_URL=$(gh pr view --json url -q .url)
          gh issue comment ${{ github.event.issue.number }} --body "PR created: $PR_URL"
